f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-10,10,length=30)
y=x
z=outer(x,y,f)
persp(x,y,z)
is.na(z)
any(is.na(z))
persp(x,y,z,theta = 30,phi = 30,expand = 0.5,col = drapecol(z))
persp(x,y,z,theta = 30,phi = 30,expand = 0.5)
persp(x,y,z,theta = 30,phi = 30,expand = 0.5,col=rainbow(1000))
source('~/GitHub/algorithm/algorithm/R/testfunction.R')
persp(x,y,z,theta = 30,phi = 30,expand = 0.5,col=rainbow(1000))
z=outer(x,y,Ackley)
source('~/GitHub/algorithm/algorithm/R/testfunction.R')
View(Ackley)
View(Ackley)
z=outer(x,y,Ackley)
persp(x,y,z,theta = 30,phi = 30,expand = 0.5,col=rainbow(1000))
library(algorithm)
plot3d(Schwefel)
library(algorithm)
plot3d(Schwefel)
v[1,1,1]=1
v=array()
v[1,1,1]=1
v=array(dim = c(2,2,2))
runif(2)
runif(2)
m=array(dim=c(2,2))
m
a=c(1,3,2,5,4)
order(a)
sort(a)
m=matrix(c(1,2,3,4),nrow = 2)
m[,1]
c(m[,1])
class(m[,1])
class(m)
library(algorithm)
library(algorithm)
pso(2,sphere)
library(algorithm)
pso(2,sphere)
library(algorithm)
pso(2,sphere)
library(algorithm)
pso(2,sphere)
library(algorithm)
pso(2,sphere)
library(algorithm)
pso(2,sphere,swarm = 3000)
pso(2,sphere,swarm = 3000)
pso(2,sphere,swarm = 500,iteration=1000)
library(algorithm)
pso(2,sphere,swarm = 500,iteration=1000)
pso(2,sphere,swarm = 500,iteration=1000)
library(algorithm)
pso(2,sphere,swarm = 500,iteration=1000)
pso(2,sphere,swarm = 500,iteration=1000)
pso(2,sphere,swarm = 500,iteration=1000)
pso(2,sphere,swarm = 500,iteration=1000)
pso(2,sphere,swarm = 500,iteration=1000)
library(algorithm)
library(algorithm)
pso(2,sphere,swarm = 500,iteration=1000)
library(algorithm)
pso(2,sphere,swarm = 500,iteration=1000,bounded = F)
library(algorithm)
pso(2,sphere,swarm = 500,iteration=1000,bounded = F)
library(algorithm)
pso(2,sphere,swarm = 500,iteration=1000,bounded = F)
library(algorithm)
pso(2,sphere,swarm = 500,iteration=1000,bounded = T)
pso(2,sphere,swarm = 500,iteration=1000,bounded = T)
library(algorithm)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
library(algorithm)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
library(algorithm)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
library(algorithm)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
library(algorithm)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
library(algorithm)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
library(algorithm)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
library(algorithm)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
library(algorithm)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
library(algorithm)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
library(algorithm)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
library(algorithm)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
library(algorithm)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
library(algorithm)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
library(algorithm)
pso(2,sphere,swarm = 200,iteration=500,bounded = T)
library(readr)
cities <- read_table2("~/Desktop/测试数据集/dataName.txt")
View(cities)
library(devtools)
use_data(cities)
library(algorithm)
cities
plot(nodes,col='red')
plot(cities)
plot(cities,type='b')
sample(1:10,10)
plot(cities,type='b',pch=3)
plot(cities,type='b',pch=5)
plot(cities,type='b',pch=1)
plot(cities,type='b',pch=0)
plot(cities,type='b',pch=8)
plot(cities,type='b',pch=9)
plot(cities,type='b',pch=6)
plot(cities,type='b',pch=11)
plot(cities,type='b',pch=12)
plot(cities,type='b',pch=13)
plot(cities,type='b',pch=14)
plot(cities,type='b',pch=15)
plot(cities,type='b',pch=16)
plot(cities,type='b',pch=16,cex=0.5)
library(algorithm)
plotroute(cities)
library(algorithm)
plotroute(cities)
plot(nodes,pch=16,cex=0.5)
plot(cities,pch=16,cex=0.5)
cities[1,]
lines(cities[1,],cities[2,])
?lines
lines(cities[2,],cities[1,])
library(algorithm)
plotroute(cities)
plot(cities,pch=16,cex=0.5)
lines(cities[2,],cities[1,])
lines(cities[3,],cities[2,])
lines(cities[2,],cities[3,])
points(cities[2,],col='red')
lines(cities)
library(algorithm)
plotroute(cities)
plotroute(cities)
outer(cities[,1],cities[,2],distances)
library(algorithm)
outer(cities[,1],cities[,2],distances)
outer(cities,cities,distances)
library(algorithm)
library(algorithm)
aco(cities)
(1:3)%o%(1:4)
matrix(nrow=3)
matrix(3)
library(algorithm)
aco(cities)
m=aco(cities)
distances(cities[5,],cities[10,])
View(m)
library(algorithm)
m=aco(cities)
distances(cities[5,],cities[10,])
distances(cities[5,],cities[5,])
m=aco(cities)
y=distances(cities[5,],cities[5,])
class(y)
as.vector(y)
as.numeric(y)
library(algorithm)
m=aco(cities)
View(m)
library(algorithm)
plot(cities)
plotroute(cities)
plotroute(cities)
plotroute(cities)
points(cities[1,])
points(cities[1,],col='res')
points(cities[1,],col='red')
tabu=1:10
5 in tabu
5 %in% tabu
tabu=rep(T,10)
tabu
any(tabu)
tabu[3]=F
which(tabu==F)
which(!tabu==F)
sampe(1:3,1,prob=c(0,1,0,2,0,7))
sample(1:3,1,prob=c(0,1,0,2,0,7))
?sample
sample(1:3,1,prob=c(0,1,0,2,0.7))
sample(1:3,1,prob=c(0.1,0,2,0.7))
sample(c(1,3),1,prob = c(0.1,0,9))
sample(c('a','b'),1,prob = c(0.1,0,9))
sample(c('a','b'),size=1,prob = c(0.1,0,9))
sample(c('a','b'),size=1,prob = c(0.1,0.9))
sample(c(1,2),size=1,prob = c(0.1,0.9))
2^3*0.5
m[1,1:2]
as.vector(m[1,1:2])
class(m[1,1:2])
a[1]=2
a=c()
a[1]=2
tabu=matrix(1,nrow = 31,ncol = 31)
tabu[1,2:5]
route(cities,tau,m)
library(algorithm)
route(cities,tau,m)
tau=tabu
rm(tabu)
library(algorithm)
route(cities,tau,m)
library(algorithm)
route(cities,tau,m)
source('~/GitHub/algorithm/algorithm/R/route.R')
source('~/GitHub/algorithm/algorithm/R/route.R')
tabu
r
sort(r)
source('~/GitHub/algorithm/algorithm/R/route.R')
source('~/GitHub/algorithm/algorithm/R/route.R')
source('~/GitHub/algorithm/algorithm/R/route.R')
source('~/GitHub/algorithm/algorithm/R/route.R')
r
source('~/GitHub/algorithm/algorithm/R/route.R')
r
route(cities,tau,m)
library(algorithm)
route(cities,tau,m)
library(algorithm)
totdist(r,cities)
library(algorithm)
totdist(r,cities)
library(algorithm)
route2matrix(r)
library(algorithm)
route2matrix(r)
m_route=route2matrix(r)
View(m_route)
library(algorithm)
m_route=route2matrix(r)
View(m_route)
g=1:10
g
g[0]
g[0]=100
g
library(algorithm)
aco(cities)
aco(cities)
aco(cities)
source('~/GitHub/algorithm/algorithm/R/aco.R')
source('~/GitHub/algorithm/algorithm/R/aco.R')
source('~/GitHub/algorithm/algorithm/R/aco.R')
source('~/GitHub/algorithm/algorithm/R/aco.R')
source('~/GitHub/algorithm/algorithm/R/aco.R')
min(L)
source('~/GitHub/algorithm/algorithm/R/aco.R')
source('~/GitHub/algorithm/algorithm/R/aco.R')
gbest[300]
plot(1:300,gbest[1:300])
plot(1:300,gbest[1:300])
gbest
plotroute(cities,groute)
source('~/GitHub/algorithm/algorithm/R/aco.R')
gbest
plot(1:300,gbest)
plot(1:300,gbest,pch=16,type='b')
plot(1:300,gbest,type='l')
library(algorithm)
aco(cities)
library(algorithm)
aco(cities)
plotroute(cities,r=groute)
